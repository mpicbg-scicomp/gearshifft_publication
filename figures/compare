#!/usr/bin/env Rscript

library(docopt)
library(ggplot2)
library(readr)
library(dplyr, warn.conflicts=FALSE)
library(gridExtra)
library(scales)
library(gtable)

'Usage:
   compare [options] <csv-files>...

 -r --real          	Use Real Data [default: FALSE]
 -c --complex       	Use Complex Data [default: FALSE]
 -i --inplace       	Use inplace transforms [default: FALSE]
 -o --outofplace    	Use out-of-place transforms [default: FALSE]
 -s --fp32          	Use (32-bit) single precision [default: FALSE]
 -d --fp64          	Use (64-bit) double precision [default: FALSE]
 -n --ndims=ND      	Use only ND dimensional output [default: 2], do not filter if ND=0
 --nolegend             Do not add a legend to the plot [default: FALSE]
 --notitle              Do not add a title to the plot [default: FALSE]
 --legend-only          Only save the legend to file [default: FALSE]
 --use-points           Use points in the plots to indicate mean [default: FALSE]
 --legend-pos=LPOS      If legend is plotted, plot it at <LPOS> [default: top]
 -y --ymetric=YMETRIC 	Use metric YMETRIC for plotting along y, this can now be a valid R expression that computes a derived value [default: Time_Total]
 --ylabel=YLABEL 	Use YLABEL for labelling the ymetric, note that underscores will be replaced by white spaces as white spaces are not correctly handled through the CLI [default: ]
 --ylimit=YLIMIT 	Use YLIMIT for marking the lowest and highest value shown on the y axis [default: 0,0]
 --xlabel=XLABEL 	Use XLABEL for labelling the ymetric, note that underscores will be replaced by white spaces as white spaces are not correctly handled through the CLI [default: Signal_Size_[bytes] ]
 --xlimit=XLIMIT 	Use XLIMIT for marking the lowest and highest value shown on the x axis [default: 0,0]
 --logy=LOGYVALUE       Use log scale on y-axis [default: 1]
 -x --xmetric=XMETRIC 	Use metric XMETRIC for plotting along y [default: nbytes]
 --logx=LOGXVALUE       Use log scale on x-axis [default: 1]
 --aspect=ASPECTRATIO   Use ASPECTRATIO as value for plot boundaries [default: ]
 -a --aesthetics=AES    plot these aesthetics, comma separated list with up to 3 elements [default: library,hardware]
                        AES will be matched to (color,linetype,shape)
 -k --kind=KINDTYPE	Filter for KINDTYPE before plotting [default: powerof2], do not filter if KINDTYPE="all"
 -f --filename=FNAME    Use FNAME as base stem for output plots [default: gearshifft_plot]
 --pdfheight=value      Height in inches for pdf output [default: 4.0]
' -> doc

opts <- docopt(doc)
opts

open_gearshifft_csv <- function (fname){

    #extracting measurements
    local_frame <- read_csv(fname,skip=3,col_names=TRUE)
    colnames(local_frame) <- gsub(' ','_',colnames(local_frame))
    #extracting card info
    lines <- readLines(fname)
    line_1 = lines[[1]]
    line_1 <- gsub(' "','',line_1)
    line_1 <- gsub('"','',line_1)
    line_1 <- gsub(';','',line_1)
    colnames(local_frame) <- gsub('ID','id',colnames(local_frame))

    
    line_1_splited <- strsplit(line_1,",")
    gpu_model <- ""
    nrw <- nrow(local_frame)
    
    if(grepl("clfft", line_1_splited[[1]][1], ignore.case = TRUE)){
        if(grepl("CPU", line_1_splited[[1]][3], ignore.case = TRUE)){
            gpu_model <- paste("E5-2680v3 ",line_1_splited[[1]][11],"x (clFFT)",sep="") # make it equal to fftw hardware when cpu E5 is used
        } else {
            gpu_model <- line_1_splited[[1]][3]
        }
        flags = "None"
        cat("THIS IS",local_frame$library[1],gpu_model,"\twith ",nrw,"\n")
    } else {

        if(grepl("CUDA Runtime", line_1, ignore.case = TRUE)) {
            gpu_model <- line_1_splited[[1]][1]
            flags = "None"
            cat("THIS IS",local_frame$library[1],gpu_model,"\twith ",nrw,"\n")
            
        }

        if(grepl("SupportedThreads", line_1, ignore.case = TRUE)) {
            gpu_model <- paste("E5-2680v3 ",line_1_splited[[1]][4],"x (fftw)",sep="")
            flags = gsub("_","-",line_1_splited[[1]][8])
            cat("THIS IS",local_frame$library[1],gpu_model,"\twith ",nrw,"(",flags,")\n")
            
        }

    }

    
    local_frame = local_frame %>%
        mutate(nx = ifelse(nx==0,1,nx) ) %>%
            mutate(ny = ifelse(ny==0,1,ny) ) %>%
                mutate(nz = ifelse(nz==0,1,nz) ) %>%
                    mutate( n_elements = nx*ny*nz )
    #local_frame = local_frame %>% mutate( n_elements = nx*ny*nz )
    local_frame = local_frame %>% mutate( 
        nbytes = ifelse("Complex" %in% complex,2,1)*ifelse("float" %in% precision,4,8)*n_elements,
        hardware = gpu_model,
        flags = flags,
        architecture = ifelse(grepl("[a-zA-Z][1-9]-",gpu_model),"cpu","gpu"))
    
    ## local_frame$hardware <- gpu_model

    ## #TODO: watch out, this is Intel specific
    ## local_frame$architecture <- 
    ## head(local_frame)
    ## local_frame$flags <- flags
    local_frame = local_frame %>% mutate( library = tolower(library))
    
    return(local_frame)
}

dframes <- lapply(opts[["<csv-files>"]], open_gearshifft_csv) %>% bind_rows()

gearshifft_data <- dframes %>% bind_rows()

cat("total rows collected: \t",nrow(gearshifft_data),"\n")


filter_mode <- ""
if(opts[["outofplace"]]){
    filter_mode <- "Outplace"
}

if(opts[["inplace"]]){
    filter_mode <- "Inplace"
}



filter_prec <- ""
if(opts[["fp64"]]){
    filter_prec <- "double"
}

if(opts[["fp32"]]){
    filter_prec <- "float"
}


filter_type <- ""
if(opts[["complex"]]){
    filter_type <- "Complex"
}

if(opts[["real"]]){
    filter_type <- "Real"
}

filter_kind <- opts[["kind"]]
filter_dim <- as.integer(opts[["ndims"]])

####################################### FILTER ##############################################
succeeded <- gearshifft_data %>% filter(success == "Success")

filtered_by <- c("success")

if ( nchar(filter_mode) > 0){
    succeeded <- succeeded %>% filter(inplace == filter_mode)
    cat("filtered for inplace == ",filter_mode,": \t",nrow(succeeded),"\n")
    filtered_by <- c(filtered_by, filter_mode)
}

if ( nchar(filter_type) > 0 ){
    succeeded <- succeeded %>% filter(complex == filter_type)
    cat("filtered for complex == ",filter_type,": \t",nrow(succeeded),"\n")
    filtered_by <- c(filtered_by, filter_type)
}

if ( nchar(filter_prec) > 0){
    succeeded <- succeeded %>% filter(precision == filter_prec)
    cat("filtered for precision == ",filter_prec,": \t",nrow(succeeded),"\n")
    filtered_by <- c(filtered_by, filter_prec)
}

if ( nchar(filter_kind) > 0 && !("all" %in% filter_kind) ){
    succeeded <- succeeded %>% filter(kind == filter_kind)
    cat("filtered for kind == ",filter_kind,": \t",nrow(succeeded),"\n")
    filtered_by <- c(filtered_by, filter_kind)
}

if ( length(filter_dim) > 0){
    succeeded <- succeeded %>% filter(dim == filter_dim)
    cat("filtered for ndims == ",filter_dim,": \t",nrow(succeeded),"\n")
    filtered_by <- c(filtered_by, paste(filter_dim,"D",sep=""))
} 

cat("total rows filtered: \t",nrow(succeeded),"\n")
data_colnames = colnames(succeeded)

##############################################################################
                                        # extracting ymetric expression

ymetric_keywords = trimws(unlist(strsplit(opts[["ymetric"]],"[-|+|/|*|)|(]")))
ymetric_expression = opts[["ymetric"]]

                                        # creating expression
for(i in 1:length(ymetric_keywords)) {

    indices = grep(ymetric_keywords[i],data_colnames) 
    if( length(indices) > 0 && !is.null(ymetric_keywords[i]) && nchar(ymetric_keywords[i]) > 1){
        to_replace = paste("succeeded[,",indices[1],"]",sep="")
        cat(i,ymetric_keywords[i],"->",to_replace,"in",ymetric_expression,"\n")
        ymetric_expression = gsub(ymetric_keywords[i],to_replace,
                                  ymetric_expression)
    }
}


cat("parsing of expression ",opts[["ymetric"]]," yielded .",ymetric_expression,". \n",sep="")


                                        # creating metric of interest (moi)
new_values = eval(parse(text=ymetric_expression))
colnames(new_values) <- c("ymoi")

name_of_ymetric = opts[["ymetric"]]

if( length(ymetric_keywords) == 1  ){
    name_of_ymetric = data_colnames[grep(ymetric_keywords[1], data_colnames)[1]] 
}

if(exists('ylabel', where=opts) && !is.null(opts[["ylabel"]])) {
        
    if( nchar(opts[["ylabel"]]) > 1){
        name_of_ymetric = gsub("_"," ",opts[["ylabel"]])
    }
}
cat("[ylabel] using ylabel: ",name_of_ymetric,"\n")

succeeded_ymetric_of_interest  = new_values
################################################################################

##############################################################################
                                        # extracting xmetric expression
if(grep(opts[["xmetric"]],data_colnames) == 0){
    
    stop(paste(opts[["xmetric"]], "for x not found in available columns \n",data_colnames,"\n"))
}


succeeded_xmetric_of_interest  <- succeeded %>% select(contains(opts[["xmetric"]]))
name_of_xmetric <- colnames(succeeded_xmetric_of_interest)[1]
if(exists('xlabel', where=opts) && !is.null(opts[["xlabel"]])) {
    
    
    if( nchar(opts[["xlabel"]]) > 1){
        name_of_xmetric = opts[["xlabel"]]
    }
}
cat("[xlabel] using xlabel: ",name_of_xmetric,"\n")
colnames(succeeded_xmetric_of_interest) <- c("xmoi")
################################################################################


succeeded_factors <- succeeded %>% select(-ends_with("]"))

succeeded_reduced <- bind_cols(succeeded_factors,
                               succeeded_xmetric_of_interest,
                               succeeded_ymetric_of_interest)
#names(succeeded_reduced)[names(succeeded_reduced) == name_of_xmetric] <- "xmoi"


cat("calculating mean,median and sd of ",name_of_ymetric," versus ",name_of_xmetric,"\n")



if( grepl("bytes",name_of_xmetric)  ) {
    succeeded_reduced$xmoi <- succeeded_reduced$xmoi / (1024.*1024.)
    name_of_xmetric <- gsub("bytes","MiB",name_of_xmetric)
}

if( grepl("bytes",name_of_ymetric) ){
    succeeded_reduced$ymoi <- succeeded_reduced$ymoi / (1024*1024)
    name_of_ymetric <- gsub("bytes","MiB",name_of_ymetric)
}


cols_to_consider <- Filter(function(i){ !(i %in% filtered_by || i == "id" || i == "run") },c(colnames(succeeded_factors),"xmoi"))
cols_to_grp_by <- lapply(c(cols_to_consider,"id"), as.symbol)
        

cat("summarizing by ",paste(cols_to_grp_by),"\n")
data_for_plotting <- succeeded_reduced %>%
    group_by_(.dots = cols_to_grp_by) %>%
    ##group_by(library, hardware, id, nx, ny, nz, xmoi) %>%
    summarize( moi_mean = mean(ymoi),
              moi_median = median(ymoi),
              moi_stddev = sd(ymoi)
              )


glimpse(data_for_plotting)


##### plotting part


my_theme <-  theme_bw() + theme(axis.title.x = element_text(size=18),
                                axis.title.y = element_text(size=18),
                                axis.text.x = element_text(size=14),
                                axis.text.y = element_text(size=14)#,
                                        #axis.text.x  = element_text()
                                ,plot.margin = unit(c(8,10,1,1), "pt") # required otherwise labels are clipped in pdf output
                                ) 
my_theme <- my_theme + theme(legend.title = element_blank(),#legend.title = element_text(size=16, face="bold"),
                             legend.text = element_text( size = 16),
                             legend.position="top",
                             legend.direction="vertical",
                             legend.box ="horizontal",
                             legend.box.just ="top",
                             legend.background = element_rect(colour = 'white', fill = 'white', size = 0., linetype='dashed'),
                             legend.key = element_rect(colour = 'white', fill = 'white', size = 0., linetype='dashed'),
                             legend.key.width = unit(1.1, "cm")
                             ) 

aesthetics_from_cli <- strsplit(opts[["aesthetics"]],",")

aesthetics_keys   <- c("colour","linetype","shape")
aesthetics_to_use <- aes(x=xmoi)
aesthetics_length <- length(aesthetics_from_cli[[1]])
n_items_per_aesthetics = c()
counter = 1
for(i in 1:length(aesthetics_keys)) {
    
    if( i <= aesthetics_length ){
        current_levels = eval(parse(text=paste("levels(as.factor(data_for_plotting$",
                                        aesthetics_from_cli[[1]][i],"))",
                                        sep="")))
        n_items_per_aesthetics[counter] = length(current_levels)
        counter = counter + 1
        cat("ggplot aesthetics : ",aesthetics_keys[i]," = ",
            aesthetics_from_cli[[1]][i]," possible values: ",
            current_levels,
            "\n")
        aesthetics_to_use[[aesthetics_keys[i]]] <- as.symbol(aesthetics_from_cli[[1]][i])
    }
}
aesthetics_to_use
moi_plot <- ggplot(data_for_plotting, ## aes(x=xmoi,
                                      ##     #y=mean_elapsed_sec,
                                      ##     color=library,
                   ##     linetype=hardware)
                   aesthetics_to_use
                   )


moi_plot <- moi_plot + geom_line(aes(y=moi_mean),size=.8)
if( opts[["use-points"]] != FALSE ) {
    moi_plot <- moi_plot + geom_point(aes(y=moi_mean),size=1)
}
moi_plot <- moi_plot + geom_errorbar(aes(ymin = moi_mean - moi_stddev,
                                         ymax = moi_mean + moi_stddev),
                                     width=0.25, linetype =1)
#moi_plot <- moi_plot + scale_color_manual(name = "", values = c("red", 'blue'),labels=?)
moi_plot <- moi_plot + scale_linetype_manual(values = c("solid","dotted","longdash")) #2,3,5,4,22,33,55,44))

cat("filtered by",paste(filtered_by, collapse=" "),"(n aesthetics = ",paste(aesthetics_length),")\n")
if( opts[["notitle"]] == F ) {
    moi_plot <- moi_plot + ggtitle(paste(filtered_by,collapse=" "))
}

express <- function(char.expressions){
       return(parse(text=paste(char.expressions,collapse=";")))
   }

moi_plot <- moi_plot + ylab(gsub("_"," ",name_of_ymetric)) + xlab(gsub("_"," ",name_of_xmetric))
moi_plot <- moi_plot + my_theme 

str_to_numeric = function( string, sep ) {
    
    splitted = unlist(strsplit(string,sep))
    vec = sapply(splitted, function(x) as.numeric(x))
    return(vec)
}

## ylimit_splitted = unlist(strsplit(opts[["ylimit"]],","))
## ylimit_pair = sapply(ylimit_splitted, function(x) as.numeric(x))
ylimit_pair = str_to_numeric(opts[["ylimit"]], ",")
xlimit_pair = str_to_numeric(opts[["xlimit"]], ",")

if( length(ylimit_pair) == 2 ) {
    if(ylimit_pair[1] != 0 || ylimit_pair[2]!=0){
        cat("[ylimit] setting to ",paste(ylimit_pair),"\n")
        moi_plot <- moi_plot + ylim(ylimit_pair[1],ylimit_pair[2])
    }
}

if( length(xlimit_pair) == 2 ) {
    if(xlimit_pair[1] != 0 || xlimit_pair[2]!=0){
        cat("[xlimit] setting to ",paste(xlimit_pair),"\n")
        moi_plot <- moi_plot + xlim(xlimit_pair[1],xlimit_pair[2])
    }
}


if(opts[["nolegend"]]){
    moi_plot <- moi_plot + theme(legend.position="none")
}


logy_value <- as.integer(opts[["logy"]])
logx_value <- as.integer(opts[["logx"]])

xmin <- min(data_for_plotting$xmoi)
xmax <- max(data_for_plotting$xmoi)

ymin <- min(data_for_plotting$moi_mean)
ymax <- max(data_for_plotting$moi_mean)


if(logy_value > 1) {

    breaks_y = function(x) logy_value^x
    format_expr_y = eval(parse(text=paste("math_format(",logy_value,"^.x)",sep="")))

    if(length(ylimit_pair) == 2 && (ylimit_pair[1] != 0 && ylimit_pair[2]!=0)){
        scale_structure = scale_y_continuous(
            limits = ylimit_pair,
            trans = log_trans(base=logy_value),
            breaks = trans_breaks(paste("log",logy_value,sep=""), breaks_y),
            labels = trans_format(paste("log",logy_value,sep=""), format_expr_y))
    } else {
            scale_structure = scale_y_continuous(
            trans = log_trans(base=logy_value),
            breaks = trans_breaks(paste("log",logy_value,sep=""), breaks_y),
            labels = trans_format(paste("log",logy_value,sep=""), format_expr_y))
    
    }

    moi_plot <- moi_plot + scale_structure
}



if(logx_value > 1) {

    breaks_x = function(x) logx_value^x
    format_expr_x = eval(parse(text=paste("math_format(",logx_value,"^.x)",sep="")))
    if(length(xlimit_pair) == 2 && (xlimit_pair[1] != 0 && xlimit_pair[2]!=0)){
        scale_x_structure = scale_x_continuous(
            limits = xlimit_pair,
            trans = log_trans(base=logx_value),
            breaks = trans_breaks(paste("log",logx_value,sep=""), breaks_x),
            labels = trans_format(paste("log",logx_value,sep=""), format_expr_x)
            )
    } else {
        scale_x_structure = scale_x_continuous(
            trans = log_trans(base=logx_value),
            breaks = trans_breaks(paste("log",logx_value,sep=""), breaks_x),
            labels = trans_format(paste("log",logx_value,sep=""), format_expr_x)
            )
    
    }

    moi_plot <- moi_plot + scale_x_structure
}

cat(opts[["aspect"]],"\n")
if( nchar(opts[["aspect"]]) > 0 ){
    
    ratio.display <- eval(parse(text=opts[["aspect"]]))
    ratio.values <- (xmax-xmin)/(ymax-ymin)
    cat(opts[["aspect"]],ratio.display,ratio.values, "\n") 
    moi_plot <- moi_plot  + coord_fixed(ratio.values / ratio.display)

}

## TODO: save legend in an independent plot
## http://stackoverflow.com/questions/12041042/how-to-plot-just-the-legends-in-ggplot2
## http://stackoverflow.com/questions/12539348/ggplot-separate-legend-and-plot

g_legend<-function(a.gplot){ 
  tmp <- ggplot_gtable(ggplot_build(a.gplot)) 
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box") 
  legend <- tmp$grobs[[leg]] 
  return(legend)
} 


if(opts[["legend-only"]]){
    
    moi_plot = moi_plot + theme(legend.title = element_blank(),
                                legend.position="top",
                                legend.box.just="top")
    if( max(n_items_per_aesthetics) > 2 ) {
        moi_plot = moi_plot + guides(col = guide_legend(nrow = 2))
    } else {
        moi_plot = moi_plot + guides(col = guide_legend(nrow = 1))
    }
    legend <- g_legend(moi_plot)

    print(legend)
    print(legend$heights[3])
    cat(typeof(legend$heights[3]),length(legend$heights[3]),paste(eval(legend$heights[3][[1]])),"\n")
    print(legend$widths[3])
    
    rows_with_guides = legend$layout %>% filter(grepl("guide",name))
    nrow_in_legend = 3#nrow(rows_with_guides)
    cat("found",nrow_in_legend , "rows (max items: ",max(n_items_per_aesthetics),") in legend\n" )

    ggsave(paste(opts[["filename"]],".png",sep=""),legend,width=12,height=.9)
    ggsave(paste(opts[["filename"]],".svg",sep=""),legend,width=12,height=.9)
    cairo_pdf(paste(opts[["filename"]],".pdf",sep=""),width=12,height=0.3*nrow_in_legend)
    
    grid.arrange(legend,ncol=1)
    dev.off()
} else {

    if ( aesthetics_length > 2 ) {
        moi_plot = moi_plot + guides(col = guide_legend(ncol= aesthetics_length, nrow = 2))
    }
    ggsave(paste(opts[["filename"]],".png",sep=""),moi_plot)
    ggsave(paste(opts[["filename"]],".svg",sep=""),moi_plot)
    pdfheight <- as.numeric(opts[["pdfheight"]])
    if(opts[["nolegend"]]) {
        cairo_pdf(paste(opts[["filename"]],".pdf",sep=""),
                  width=5,
                  height=pdfheight)
    }else{
        cairo_pdf(paste(opts[["filename"]],".pdf",sep=""),
                  width=5,
                  height=0.5+pdfheight)
    }
    print(moi_plot)
    dev.off()
}

## succeeded_by_ID <- succeeded %>% group_by(id)
## head(succeeded_by_ID)
